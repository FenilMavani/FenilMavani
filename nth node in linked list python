#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb 20 21:35:56 2020

@author: fenilmavani
"""
# A complete working Python program to find n'th node 
# in a linked list 

# Node class 
class Node:
    def __init__(self, init_data):
        self.data = init_data
        self.next = None
    
    def get_data(self):
        return self.data
    
    def get_next(self):
        return self.next
    
    def set_data(self, new_data):
        self.data = new_data
    
    def set_next(self, new_next):
            self.next = new_next

class UnorderedList:

    def __init__(self):
        self.head = None

    def add(self, item):
        temp = Node(item)
        temp.set_next(self.head)
        self.head = temp

    def size(self):
        current = self.head
        count = 0
        while current != None:
            count = count+1
            current = current.get_next()
        return count    
    def search(self, item):
        current = self.head
        found = False
        while current != None and not found:
            if current.get_data() == item:
                found = True
            else:
                current = current.get_next()
        return found 

    def remove(self, item): # Removes item from list; returns True if item was in list, False otherwise
        current = self.head
        previous = None
        found = False
        while not found and current != None:
            if current.get_data() == item:
                found = True
            else:
                previous = current
                current = current.get_next()
        if previous == None: # Item found at head of list
            self.head= current.get_next() # remove item from head of list
        elif found:
            previous.set_next(current.get_next()) # remove item from list
        return found
                
    def isEmpty(self):
         return self.head == None
     
    def print_list(self): # Prints the data values of all nodes in the list
        curr = self.head
        while curr != None:
            print(curr.get_data(), end = ' ')
            curr = curr.get_next()
        print()
   
    def recCount(self, node): 
    	if (not node):
    		return 0
    	else: 
    		return 1 + self.recCount(node.next) 	 
    def Count(self):
        return self.recCount(self.head)
    
    
    def nthnode(self, position):
        present = self.head
        count = 1
        
        while(present):
            if(count == position):
                return present.data
            count = count+1
            present = present.next
            
        return 0 #for non existent element 
    
    
    
    
list = UnorderedList()

list.add(12)
list.add(23)
list.add(99)
list.add(66)
list.add(43)
list.add(32)
list.add(23)
list.add(44)

n = 6
                                   
print("Element at",n,"is: ",list.nthnode(n))













































def SecondToLastNode(head):
        temp = head
        if(temp == None or temp.next == None):
            return -1
        while(temp!=None):
            if(temp.next.next == None):
                return temp.data
            temp = temp.next

def add(head, item):
        node = Node(item)
        node.next = head
        head = node
        return head    
            
   
head = None
head = add(head,10)
head = add(head,37)
head = add(head,76)
head = add(head,46)
head = add(head,90)
head = add(head,76)
head = add(head,55)
#print("Second to last node is ",SecondToLastNode(head))


            
            
            







    
    
    
    
    
    
    
    
    
    
           